name: .NET Core

on:
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-18.04
    container:
      image: mcr.microsoft.com/dotnet/core/sdk:3.1.201-bionic

    steps:
      - uses: actions/checkout@v2

      - name: Decrypt the GPG encrypted config files
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.GPG_PASSPHRASE }}  --output ./kwet-service/appsettings.json --decrypt ./kwet-service/appsettings.staging.json.gpg

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.201

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build

      - name: Test
        run: dotnet test

      - name: Publish
        run: dotnet publish -c Release -o out

      - name: Upload release artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-artifact
          path: ./out

      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-artifact
          path: ./Dockerfile

      - name: Upload Kubernetes artifact
        uses: actions/upload-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_develop

  delivery:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v1
        with:
          name: release-artifact
          path: ./out

      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-artifact
          path: .

      - name: Deliver Docker image
        env:
          CONTAINER_IMAGE: s6individualproject/${{ secrets.REPOSITORY_NAME }}:${{ github.sha }}
          CONTAINER_IMAGE_LATEST: s6individualproject/${{ secrets.REPOSITORY_NAME }}:staging
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker build -t $CONTAINER_IMAGE -t $CONTAINER_IMAGE_LATEST .
          docker push $CONTAINER_IMAGE
          docker push $CONTAINER_IMAGE_LATEST

  deployment:
    needs: delivery
    runs-on: ubuntu-18.04
    steps:
      - name: Download Kubernetes artifact
        uses: actions/download-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_develop
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1

      - name: Set context via kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy Kubernetes with manifests
        uses: azure/k8s-deploy@v1
        with:
          namespace: kwetter-staging
          manifests: |
            ./kube_develop/certificate.yaml
            ./kube_develop/autoscaler.yaml
            ./kube_develop/deployment.yaml
            ./kube_develop/ingress.yaml
            ./kube_develop/service.yaml
          images: |
            ${{ secrets.DOCKER_ORGANIZATION }}/${{ secrets.REPOSITORY_NAME }}:${{ github.sha }}